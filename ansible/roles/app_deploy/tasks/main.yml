---
- name: Create application directory
  file:
    path: "/home/{{ ansible_user }}/{{ project_name }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy docker-compose.yml
  copy:
    src: "{{ compose_file }}"
    dest: "/home/{{ ansible_user }}/{{ project_name }}/docker-compose.yml"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Create environment file from template
  template:
    src: env.j2
    dest: "/home/{{ ansible_user }}/{{ project_name }}/.env"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Pull latest Docker image
  community.docker.docker_image:
    name: "{{ docker_image }}"
    tag: "{{ image_tag.split(':')[-1] }}"
    source: pull

- name: Stop and remove existing containers
  community.docker.docker_compose:
    project_src: "/home/{{ ansible_user }}/{{ project_name }}"
    state: absent
    files:
      - docker-compose.yml

- name: Start containers with Docker Compose
  community.docker.docker_compose:
    project_src: "/home/{{ ansible_user }}/{{ project_name }}"
    state: present
    build: no
    pull: yes
    files:
      - docker-compose.yml

- name: Wait for services to be ready
  wait_for:
    timeout: 60

- name: Check container status
  command: docker-compose ps
  args:
    chdir: "/home/{{ ansible_user }}/{{ project_name }}"
  register: container_status

- name: Show container status
  debug:
    var: container_status.stdout_lines

- name: Check application health
  uri:
    url: "http://localhost:{{ app_port }}/"
    method: GET
    status_code: 200
    timeout: 30
  register: health_check
  until: health_check.status == 200
  retries: 10
  delay: 5
  ignore_errors: yes

- name: Show application logs if health check failed
  command: docker-compose logs web_services
  args:
    chdir: "/home/{{ ansible_user }}/{{ project_name }}"
  when: health_check is failed
  register: app_logs

- name: Display application logs on failure
  debug:
    var: app_logs.stdout_lines
  when: health_check is failed